// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(NetEquusDbContext))]
    [Migration("20250807114821_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompetitionLevelCompetitionType", b =>
                {
                    b.Property<int>("AllowedLevelsLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AllowedTypesTypeId")
                        .HasColumnType("int");

                    b.HasKey("AllowedLevelsLevelId", "AllowedTypesTypeId");

                    b.HasIndex("AllowedTypesTypeId");

                    b.ToTable("CompetitionLevelCompetitionType");
                });

            modelBuilder.Entity("Domain.Models.AuctionBid", b =>
                {
                    b.Property<int>("AuctionBidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionBidId"));

                    b.Property<int>("AuctionSaleId")
                        .HasColumnType("int");

                    b.Property<int>("BidAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("BidderEquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeBidPlaced")
                        .HasColumnType("datetime2");

                    b.HasKey("AuctionBidId");

                    b.HasIndex("AuctionSaleId");

                    b.HasIndex("BidderEquineEstateId");

                    b.ToTable("AuctionBids");
                });

            modelBuilder.Entity("Domain.Models.Breed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedId"));

                    b.Property<int>("Acquisition")
                        .HasColumnType("int");

                    b.Property<int?>("BreedGroupId")
                        .HasColumnType("int");

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanMix")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("DisciplinAffinity")
                        .HasColumnType("float");

                    b.Property<bool>("IsFoundationBred")
                        .HasColumnType("bit");

                    b.Property<int?>("LaunchQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("LaunchSalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("MaxHeight")
                        .HasColumnType("int");

                    b.Property<int>("MinHeight")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int?>("SaleEventTypeId")
                        .HasColumnType("int");

                    b.HasKey("BreedId");

                    b.HasIndex("BreedGroupId");

                    b.HasIndex("SaleEventTypeId");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("Domain.Models.BreedGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BreedGroups");
                });

            modelBuilder.Entity("Domain.Models.BreedQualityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EvaluationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastEvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HorseId")
                        .IsUnique();

                    b.ToTable("BreedQualityScores");
                });

            modelBuilder.Entity("Domain.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompetitionId"));

                    b.Property<string>("ActualWeather")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompetitionLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CompetitionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisciplineGroupId")
                        .HasColumnType("int");

                    b.Property<string>("DisciplineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EntryCloseAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryOpenAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResultsAvailableAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("CompetitionId");

                    b.HasIndex("CompetitionLevelId");

                    b.HasIndex("CompetitionTypeId");

                    b.HasIndex("DisciplineGroupId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("VenueId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Domain.Models.CompetitionEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntryId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GuidHorseId");

                    b.ToTable("CompetitionEntries");
                });

            modelBuilder.Entity("Domain.Models.CompetitionLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<int>("EntryFee")
                        .HasColumnType("int");

                    b.Property<int>("MinHorseAge")
                        .HasColumnType("int");

                    b.Property<int>("MinPointRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointType")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("CompetitionLevels");
                });

            modelBuilder.Entity("Domain.Models.CompetitionResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Placement")
                        .HasColumnType("int");

                    b.Property<int>("PlacementPrice")
                        .HasColumnType("int");

                    b.Property<int>("PointType")
                        .HasColumnType("int");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GuidHorseId");

                    b.ToTable("CompetitionResults");
                });

            modelBuilder.Entity("Domain.Models.CompetitionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecoveryRequired")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationFee")
                        .HasColumnType("int");

                    b.Property<int>("RequiredPointType")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredPoints")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.ToTable("CompetitionTypes");
                });

            modelBuilder.Entity("Domain.Models.Competitions.DisciplineGroupAllowedDiscipline", b =>
                {
                    b.Property<int>("DisciplineGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Discipline")
                        .HasColumnType("int");

                    b.HasKey("DisciplineGroupId", "Discipline");

                    b.ToTable("DisciplineGroupAllowedDiscipline");
                });

            modelBuilder.Entity("Domain.Models.ConfPerfTempAttributes", b =>
                {
                    b.Property<int>("CPTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CPTId"));

                    b.Property<Guid>("GuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TemperamentInformationTemperamentId")
                        .HasColumnType("int");

                    b.HasKey("CPTId");

                    b.HasIndex("GuidHorseId")
                        .IsUnique();

                    b.HasIndex("TemperamentInformationTemperamentId");

                    b.ToTable("ConfPerfTempAttributes");
                });

            modelBuilder.Entity("Domain.Models.CrossGroup", b =>
                {
                    b.Property<int>("CrossGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CrossGroupId"));

                    b.Property<int?>("BreedGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrossGroupId");

                    b.HasIndex("BreedGroupId");

                    b.ToTable("CrossGroups");
                });

            modelBuilder.Entity("Domain.Models.DisciplineGroup", b =>
                {
                    b.Property<int>("DisciplineGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineGroupId"));

                    b.Property<string>("AllowedGroundTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIndoorDiscipline")
                        .HasColumnType("bit");

                    b.HasKey("DisciplineGroupId");

                    b.ToTable("DisciplineGroups");
                });

            modelBuilder.Entity("Domain.Models.EquineEstate", b =>
                {
                    b.Property<Guid>("EquineEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<int>("HorseAmount")
                        .HasColumnType("int");

                    b.Property<string>("ProfileEdit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquineEstateId");

                    b.ToTable("EquineEstates");
                });

            modelBuilder.Entity("Domain.Models.EquineEstates.EquineEstateMergeRequest", b =>
                {
                    b.Property<int>("EEMergeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EEMergeRequestId"));

                    b.Property<Guid>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProposedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("ToEquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EEMergeRequestId");

                    b.HasIndex("EquineEstateId");

                    b.HasIndex("ToEquineEstateId");

                    b.ToTable("EquineEstateMergeRequests");
                });

            modelBuilder.Entity("Domain.Models.EquineEstatesOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrimaryOwner")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquineEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("EquineEstatesOwners");
                });

            modelBuilder.Entity("Domain.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacilityType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("HorseCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EquineEstateId" }, "IX_Facilities_EquineEstateId");

                    b.ToTable("Facilities");

                    b.HasDiscriminator<string>("FacilityType").HasValue("Facility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Foaling", b =>
                {
                    b.Property<int>("FoalingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoalingId"));

                    b.Property<Guid>("DamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EstimatedValueIncrease")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("FoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FoalingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SireId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoalingId");

                    b.HasIndex("DamId");

                    b.HasIndex("EquineEstateId");

                    b.HasIndex("FoalId")
                        .IsUnique();

                    b.HasIndex("SireId");

                    b.ToTable("Foalings");
                });

            modelBuilder.Entity("Domain.Models.FoundationPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOrderSensitive")
                        .HasColumnType("bit");

                    b.Property<int>("ParentBreedDamId")
                        .HasColumnType("int");

                    b.Property<int>("ParentBreedSireId")
                        .HasColumnType("int");

                    b.Property<int>("ResultBreedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentBreedDamId");

                    b.HasIndex("ParentBreedSireId");

                    b.HasIndex("ResultBreedId");

                    b.ToTable("FoundationPairs");
                });

            modelBuilder.Entity("Domain.Models.Horse", b =>
                {
                    b.Property<Guid>("GuidHorseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AgingDate")
                        .HasColumnType("date");

                    b.Property<int>("Archetype")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<double?>("CachedBQS")
                        .HasColumnType("float");

                    b.Property<double>("ChachedPQS")
                        .HasColumnType("float");

                    b.Property<string>("DisciplineGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePurposeType")
                        .HasColumnType("int");

                    b.Property<string>("HorseRegistryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFoal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInPasture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaulted")
                        .HasColumnType("bit");

                    b.Property<int?>("LegacyHorseId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProgressionGuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("Temperament")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("GuidHorseId");

                    b.HasIndex("HorseTypeId");

                    b.HasIndex("ProgressionGuidHorseId");

                    b.ToTable("Horses");
                });

            modelBuilder.Entity("Domain.Models.HorseArtist", b =>
                {
                    b.Property<int>("HorseArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorseArtistId"));

                    b.Property<int?>("HorseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionAccepted")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionsAwaiting")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HorseArtistId");

                    b.HasIndex("HorseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("HorseArtists");
                });

            modelBuilder.Entity("Domain.Models.HorseArtistsApproval", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GuidUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaturityStage")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubmissionId");

                    b.ToTable("HorseArtistSApprovals");
                });

            modelBuilder.Entity("Domain.Models.HorsePurposeStat", b =>
                {
                    b.Property<int>("PurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurposeId"));

                    b.Property<double>("BaseStatInheritanceMultiplier")
                        .HasColumnType("float");

                    b.Property<int>("MaxFoals")
                        .HasColumnType("int");

                    b.Property<string>("PurposeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurposeType")
                        .HasColumnType("int");

                    b.Property<double>("TrainingPointInheritanceMultiplier")
                        .HasColumnType("float");

                    b.HasKey("PurposeId");

                    b.ToTable("HorsePurposeStats");
                });

            modelBuilder.Entity("Domain.Models.HorseType", b =>
                {
                    b.Property<int>("HorseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorseTypeId"));

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int>("HorseTypeSubmissionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaturityStage")
                        .HasColumnType("int");

                    b.Property<int>("TypeCategory")
                        .HasColumnType("int");

                    b.Property<int>("TypeHorsesAlive")
                        .HasColumnType("int");

                    b.HasKey("HorseTypeId");

                    b.HasIndex("BreedId");

                    b.HasIndex("HorseTypeSubmissionId");

                    b.ToTable("HorseTypes");
                });

            modelBuilder.Entity("Domain.Models.HorseTypeSubmission", b =>
                {
                    b.Property<int>("HorseTypeSubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorseTypeSubmissionID"));

                    b.Property<int>("BreedID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHorse")
                        .HasColumnType("bit");

                    b.Property<int>("MaturityStage")
                        .HasColumnType("int");

                    b.Property<int>("Occasion")
                        .HasColumnType("int");

                    b.Property<string>("PictureRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmittedByUserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubmittedByUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HorseTypeSubmissionID");

                    b.HasIndex("BreedID");

                    b.HasIndex("SubmittedByUserUserId");

                    b.ToTable("HorseTypeSubmissions");
                });

            modelBuilder.Entity("Domain.Models.HorseTypeSubmissionArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorseArtistId")
                        .HasColumnType("int");

                    b.Property<int>("HorseTypeSubmissionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HorseArtistId");

                    b.HasIndex("HorseTypeSubmissionId");

                    b.ToTable("HorseTypeSubmissionArtists");
                });

            modelBuilder.Entity("Domain.Models.Horses.Breeds.BreedCrossGroup", b =>
                {
                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int>("CrossGroupId")
                        .HasColumnType("int");

                    b.HasKey("BreedId", "CrossGroupId");

                    b.HasIndex("CrossGroupId");

                    b.ToTable("BreedCrossGroup", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Horses.CompetitionProgression", b =>
                {
                    b.Property<Guid>("GuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompetitionLevel")
                        .HasColumnType("int");

                    b.Property<double>("CompetitionPoints")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateLastCompetition")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalCompetitions")
                        .HasColumnType("int");

                    b.HasKey("GuidHorseId");

                    b.ToTable("CompetitionProgressions");
                });

            modelBuilder.Entity("Domain.Models.Horses.HorseOwnership", b =>
                {
                    b.Property<Guid>("HorseOwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HorseGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HorseOwnershipId");

                    b.HasIndex("HorseGuidId");

                    b.HasIndex("UserId");

                    b.ToTable("HorseOwnerships");
                });

            modelBuilder.Entity("Domain.Models.Horses.Relations.HorseBoarding", b =>
                {
                    b.Property<Guid>("HorseBoardingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoarderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HorseGuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPermanentResidence")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("HorseBoardingId");

                    b.HasIndex("BoarderId");

                    b.HasIndex("EquineEstateId");

                    b.HasIndex("HorseGuidHorseId");

                    b.ToTable("HorseBoardings");
                });

            modelBuilder.Entity("Domain.Models.PerformanceQualityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("float");

                    b.Property<Guid>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("TotalCompetitions")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HorseId")
                        .IsUnique();

                    b.ToTable("PerformanceQualityScores");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.SaleEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionIdentifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInviteOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SaleEventTypes");
                });

            modelBuilder.Entity("Domain.Models.Sales.HorseSaleBase", b =>
                {
                    b.Property<int>("HorseSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorseSaleId"));

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("EquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SaleEventId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("HorseSaleId");

                    b.HasIndex("EquineEstateId");

                    b.ToTable("HorseSaleBase");

                    b.HasDiscriminator().HasValue("HorseSaleBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.ScorePotential", b =>
                {
                    b.Property<Guid>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BQSMax")
                        .HasColumnType("float");

                    b.Property<double>("BQSMin")
                        .HasColumnType("float");

                    b.Property<double>("CPSMax")
                        .HasColumnType("float");

                    b.Property<double>("CPSMin")
                        .HasColumnType("float");

                    b.HasKey("HorseId");

                    b.ToTable("ScorePotentials");
                });

            modelBuilder.Entity("Domain.Models.Season", b =>
                {
                    b.Property<int>("SeasonsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonsId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PossibleWeathers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SeasonsId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Models.Shared.SeasonWeatherAllowed", b =>
                {
                    b.Property<int>("SeasonsId")
                        .HasColumnType("int");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.HasKey("SeasonsId", "WeatherId");

                    b.ToTable("SeasonWeatherAlloweds");
                });

            modelBuilder.Entity("Domain.Models.TemperamentInformation", b =>
                {
                    b.Property<int>("TemperamentId")
                        .HasColumnType("int");

                    b.Property<string>("AffectedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectOnPerformance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformsPoorlyIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformsWellIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredGroundTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemperamentId");

                    b.ToTable("TemperamentInformation");
                });

            modelBuilder.Entity("Domain.Models.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("Domain.Models.TrophyBase", b =>
                {
                    b.Property<int>("TrophyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrophyId"));

                    b.Property<DateTime>("DateAwarded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HorseGuidHorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrophyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrophyType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("TrophyId");

                    b.HasIndex("HorseGuidHorseId");

                    b.ToTable("TrophyBase");

                    b.HasDiscriminator<string>("TrophyType").HasValue("TrophyBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Domain.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<int>("ArenaType")
                        .HasColumnType("int");

                    b.Property<int>("GroundType")
                        .HasColumnType("int");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Domain.Models.Arena", b =>
                {
                    b.HasBaseType("Domain.Models.Facility");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<int>("SurfaceType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Arena");
                });

            modelBuilder.Entity("Domain.Models.Pasture", b =>
                {
                    b.HasBaseType("Domain.Models.Facility");

                    b.Property<int>("Acreage")
                        .HasColumnType("int");

                    b.Property<bool>("HasShelter")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Pasture");
                });

            modelBuilder.Entity("Domain.Models.Personnel", b =>
                {
                    b.HasBaseType("Domain.Models.Facility");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Personnel");
                });

            modelBuilder.Entity("Domain.Models.Sales.AuctionSale", b =>
                {
                    b.HasBaseType("Domain.Models.Sales.HorseSaleBase");

                    b.Property<DateTime>("AuctionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AuctionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BuyNowPrice")
                        .HasColumnType("int");

                    b.Property<int>("StartBid")
                        .HasColumnType("int");

                    b.Property<int?>("WinningBidId")
                        .HasColumnType("int");

                    b.HasIndex("HorseId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WinningBidId");

                    b.HasDiscriminator().HasValue("AuctionSale");
                });

            modelBuilder.Entity("Domain.Models.Sales.PrivateSale", b =>
                {
                    b.HasBaseType("Domain.Models.Sales.HorseSaleBase");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid>("BuyerEquineEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SalesPrice")
                        .HasColumnType("int");

                    b.HasIndex("BuyerEquineEstateId");

                    b.HasIndex("HorseId");

                    b.HasIndex("VendorId");

                    b.HasDiscriminator().HasValue("PrivateSale");
                });

            modelBuilder.Entity("Domain.Models.Horses.HorseTrophy", b =>
                {
                    b.HasBaseType("Domain.Models.TrophyBase");

                    b.Property<Guid>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("HorseTrophy");
                });

            modelBuilder.Entity("Domain.Models.Users.PlayerTrophy", b =>
                {
                    b.HasBaseType("Domain.Models.TrophyBase");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("PlayerTrophy");
                });

            modelBuilder.Entity("Domain.Models.Horses.BreedingHorseTrophy", b =>
                {
                    b.HasBaseType("Domain.Models.Horses.HorseTrophy");

                    b.Property<int>("NumberOfFoals")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("BreedingHorse");
                });

            modelBuilder.Entity("Domain.Models.Users.BreedingTrophy", b =>
                {
                    b.HasBaseType("Domain.Models.Users.PlayerTrophy");

                    b.Property<int>("FoalsBred")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CompetitionPlayer");
                });

            modelBuilder.Entity("CompetitionLevelCompetitionType", b =>
                {
                    b.HasOne("Domain.Models.CompetitionLevel", null)
                        .WithMany()
                        .HasForeignKey("AllowedLevelsLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CompetitionType", null)
                        .WithMany()
                        .HasForeignKey("AllowedTypesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AuctionBid", b =>
                {
                    b.HasOne("Domain.Models.Sales.AuctionSale", "AuctionSale")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.EquineEstate", "BiddersEquineEstate")
                        .WithMany()
                        .HasForeignKey("BidderEquineEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuctionSale");

                    b.Navigation("BiddersEquineEstate");
                });

            modelBuilder.Entity("Domain.Models.Breed", b =>
                {
                    b.HasOne("Domain.Models.BreedGroup", "BreedGroup")
                        .WithMany("Breeds")
                        .HasForeignKey("BreedGroupId");

                    b.HasOne("Domain.Models.SaleEventType", "SaleEventType")
                        .WithMany("Breeds")
                        .HasForeignKey("SaleEventTypeId");

                    b.Navigation("BreedGroup");

                    b.Navigation("SaleEventType");
                });

            modelBuilder.Entity("Domain.Models.BreedQualityScore", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithOne("BreedQualityScore")
                        .HasForeignKey("Domain.Models.BreedQualityScore", "HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.Competition", b =>
                {
                    b.HasOne("Domain.Models.CompetitionLevel", "CompetitionLevel")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CompetitionType", "CompetitionType")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DisciplineGroup", "DisciplineGroup")
                        .WithMany("Competitions")
                        .HasForeignKey("DisciplineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Venue", "Venue")
                        .WithMany("Competitions")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionLevel");

                    b.Navigation("CompetitionType");

                    b.Navigation("DisciplineGroup");

                    b.Navigation("Season");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Domain.Models.CompetitionEntry", b =>
                {
                    b.HasOne("Domain.Models.Competition", "Competition")
                        .WithMany("CompetitionEntries")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("GuidHorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.CompetitionResult", b =>
                {
                    b.HasOne("Domain.Models.Competition", "Competition")
                        .WithMany("CompetitionResults")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "GuidHorse")
                        .WithMany("CompetitionResults")
                        .HasForeignKey("GuidHorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("GuidHorse");
                });

            modelBuilder.Entity("Domain.Models.Competitions.DisciplineGroupAllowedDiscipline", b =>
                {
                    b.HasOne("Domain.Models.DisciplineGroup", "DisciplineGroup")
                        .WithMany("AllowedDisciplines")
                        .HasForeignKey("DisciplineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisciplineGroup");
                });

            modelBuilder.Entity("Domain.Models.ConfPerfTempAttributes", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithOne("ConfPerfTempAttributes")
                        .HasForeignKey("Domain.Models.ConfPerfTempAttributes", "GuidHorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TemperamentInformation", "TemperamentInformation")
                        .WithMany()
                        .HasForeignKey("TemperamentInformationTemperamentId");

                    b.OwnsOne("Domain.Models.Horses.HorseStats.ConformationAttributes", "ConformationAttributes", b1 =>
                        {
                            b1.Property<int>("ConfPerfTempAttributesCPTId")
                                .HasColumnType("int");

                            b1.Property<double>("BackAndLoin")
                                .HasColumnType("float");

                            b1.Property<double>("BackAndTopline")
                                .HasColumnType("float");

                            b1.Property<double>("ChestAndBarrel")
                                .HasColumnType("float");

                            b1.Property<int>("ConfId")
                                .HasColumnType("int");

                            b1.Property<double>("Head")
                                .HasColumnType("float");

                            b1.Property<double>("Hindquarters")
                                .HasColumnType("float");

                            b1.Property<double>("Legs")
                                .HasColumnType("float");

                            b1.Property<double>("Neck")
                                .HasColumnType("float");

                            b1.Property<double>("OverallProportions")
                                .HasColumnType("float");

                            b1.Property<double>("Pasterns")
                                .HasColumnType("float");

                            b1.Property<double>("Shoulders")
                                .HasColumnType("float");

                            b1.HasKey("ConfPerfTempAttributesCPTId");

                            b1.ToTable("ConformationAttributes");

                            b1.WithOwner()
                                .HasForeignKey("ConfPerfTempAttributesCPTId");
                        });

                    b.OwnsOne("Domain.Models.Horses.HorseStats.PerformanceAttributes", "PerformanceAttributes", b1 =>
                        {
                            b1.Property<int>("ConfPerfTempAttributesCPTId")
                                .HasColumnType("int");

                            b1.Property<double>("Agility")
                                .HasColumnType("float");

                            b1.Property<double>("Endurance")
                                .HasColumnType("float");

                            b1.Property<double>("Gaits")
                                .HasColumnType("float");

                            b1.Property<double>("Jumping")
                                .HasColumnType("float");

                            b1.Property<int>("PerfId")
                                .HasColumnType("int");

                            b1.Property<double>("Rideability")
                                .HasColumnType("float");

                            b1.Property<double>("Speed")
                                .HasColumnType("float");

                            b1.Property<double>("Stride")
                                .HasColumnType("float");

                            b1.Property<string>("Temperament")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConfPerfTempAttributesCPTId");

                            b1.ToTable("PerformanceAttributes");

                            b1.WithOwner()
                                .HasForeignKey("ConfPerfTempAttributesCPTId");
                        });

                    b.Navigation("ConformationAttributes");

                    b.Navigation("Horse");

                    b.Navigation("PerformanceAttributes");

                    b.Navigation("TemperamentInformation");
                });

            modelBuilder.Entity("Domain.Models.CrossGroup", b =>
                {
                    b.HasOne("Domain.Models.BreedGroup", "BreedGroup")
                        .WithMany("CrossGroups")
                        .HasForeignKey("BreedGroupId");

                    b.Navigation("BreedGroup");
                });

            modelBuilder.Entity("Domain.Models.EquineEstates.EquineEstateMergeRequest", b =>
                {
                    b.HasOne("Domain.Models.EquineEstate", "FromEquineEstate")
                        .WithMany()
                        .HasForeignKey("EquineEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.EquineEstate", "ToEquineEstate")
                        .WithMany()
                        .HasForeignKey("ToEquineEstateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromEquineEstate");

                    b.Navigation("ToEquineEstate");
                });

            modelBuilder.Entity("Domain.Models.EquineEstatesOwner", b =>
                {
                    b.HasOne("Domain.Models.EquineEstate", "EquineEstate")
                        .WithMany("EquineEstatesOwners")
                        .HasForeignKey("EquineEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquineEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Facility", b =>
                {
                    b.HasOne("Domain.Models.EquineEstate", "EquineEstate")
                        .WithMany("Facilities")
                        .HasForeignKey("EquineEstateId");

                    b.Navigation("EquineEstate");
                });

            modelBuilder.Entity("Domain.Models.Foaling", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Dam")
                        .WithMany("FoalingDams")
                        .HasForeignKey("DamId")
                        .IsRequired();

                    b.HasOne("Domain.Models.EquineEstate", "EquineEstate")
                        .WithMany()
                        .HasForeignKey("EquineEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "Foal")
                        .WithOne("Foaling")
                        .HasForeignKey("Domain.Models.Foaling", "FoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "Sire")
                        .WithMany("FoalingSires")
                        .HasForeignKey("SireId")
                        .IsRequired();

                    b.Navigation("Dam");

                    b.Navigation("EquineEstate");

                    b.Navigation("Foal");

                    b.Navigation("Sire");
                });

            modelBuilder.Entity("Domain.Models.FoundationPair", b =>
                {
                    b.HasOne("Domain.Models.Breed", "ParentBreedDam")
                        .WithMany("FoundationPairParentBreedDams")
                        .HasForeignKey("ParentBreedDamId")
                        .IsRequired();

                    b.HasOne("Domain.Models.Breed", "ParentBreedSire")
                        .WithMany("FoundationPairParentBreedSires")
                        .HasForeignKey("ParentBreedSireId")
                        .IsRequired();

                    b.HasOne("Domain.Models.Breed", "ResultBreed")
                        .WithMany("FoundationPairResultBreeds")
                        .HasForeignKey("ResultBreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentBreedDam");

                    b.Navigation("ParentBreedSire");

                    b.Navigation("ResultBreed");
                });

            modelBuilder.Entity("Domain.Models.Horse", b =>
                {
                    b.HasOne("Domain.Models.HorseType", "HorseType")
                        .WithMany("Horses")
                        .HasForeignKey("HorseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horses.CompetitionProgression", "Progression")
                        .WithMany()
                        .HasForeignKey("ProgressionGuidHorseId");

                    b.Navigation("HorseType");

                    b.Navigation("Progression");
                });

            modelBuilder.Entity("Domain.Models.HorseArtist", b =>
                {
                    b.HasOne("Domain.Models.HorseType", null)
                        .WithMany("Artists")
                        .HasForeignKey("HorseTypeId");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.HorseType", b =>
                {
                    b.HasOne("Domain.Models.Breed", "Breed")
                        .WithMany("HorseTypes")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.HorseTypeSubmission", "HorseTypeSubmission")
                        .WithMany()
                        .HasForeignKey("HorseTypeSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("HorseTypeSubmission");
                });

            modelBuilder.Entity("Domain.Models.HorseTypeSubmission", b =>
                {
                    b.HasOne("Domain.Models.Breed", "Breed")
                        .WithMany("HorseTypeSubmissions")
                        .HasForeignKey("BreedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserUserId");

                    b.Navigation("Breed");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("Domain.Models.HorseTypeSubmissionArtist", b =>
                {
                    b.HasOne("Domain.Models.HorseArtist", "HorseArtist")
                        .WithMany()
                        .HasForeignKey("HorseArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.HorseTypeSubmission", "HorseTypeSubmission")
                        .WithMany("HorseTypeSubmissionArtists")
                        .HasForeignKey("HorseTypeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HorseArtist");

                    b.Navigation("HorseTypeSubmission");
                });

            modelBuilder.Entity("Domain.Models.Horses.Breeds.BreedCrossGroup", b =>
                {
                    b.HasOne("Domain.Models.Breed", "Breed")
                        .WithMany("BreedCrossGroups")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CrossGroup", "CrossGroup")
                        .WithMany("BreedCrossGroups")
                        .HasForeignKey("CrossGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("CrossGroup");
                });

            modelBuilder.Entity("Domain.Models.Horses.CompetitionProgression", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany("CompetitionProgressions")
                        .HasForeignKey("GuidHorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.Horses.HorseOwnership", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany("HorseOwnerList")
                        .HasForeignKey("HorseGuidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.Horses.Relations.HorseBoarding", b =>
                {
                    b.HasOne("Domain.Models.User", "Boarder")
                        .WithMany()
                        .HasForeignKey("BoarderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.EquineEstate", "EquineEstate")
                        .WithMany()
                        .HasForeignKey("EquineEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany("HorseBoardings")
                        .HasForeignKey("HorseGuidHorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boarder");

                    b.Navigation("EquineEstate");

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.PerformanceQualityScore", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithOne("PerformanceQualityScore")
                        .HasForeignKey("Domain.Models.PerformanceQualityScore", "HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.Sales.HorseSaleBase", b =>
                {
                    b.HasOne("Domain.Models.EquineEstate", "SellerEquineEstate")
                        .WithMany()
                        .HasForeignKey("EquineEstateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SellerEquineEstate");
                });

            modelBuilder.Entity("Domain.Models.ScorePotential", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithOne("ScorePotential")
                        .HasForeignKey("Domain.Models.ScorePotential", "HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("Domain.Models.Shared.SeasonWeatherAllowed", b =>
                {
                    b.HasOne("Domain.Models.Season", "Season")
                        .WithMany("AllowedWeathers")
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Models.TemperamentInformation", b =>
                {
                    b.HasOne("Domain.Models.ConfPerfTempAttributes", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.TemperamentInformation", "TemperamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.TrophyBase", b =>
                {
                    b.HasOne("Domain.Models.Horse", null)
                        .WithMany("TrophyBases")
                        .HasForeignKey("HorseGuidHorseId");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Domain.Models.Users.UserRole", b =>
                {
                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Sales.AuctionSale", b =>
                {
                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.AuctionBid", "WinningBid")
                        .WithMany()
                        .HasForeignKey("WinningBidId");

                    b.Navigation("Horse");

                    b.Navigation("Vendor");

                    b.Navigation("WinningBid");
                });

            modelBuilder.Entity("Domain.Models.Sales.PrivateSale", b =>
                {
                    b.HasOne("Domain.Models.EquineEstate", "BuyerEquineEstate")
                        .WithMany()
                        .HasForeignKey("BuyerEquineEstateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerEquineEstate");

                    b.Navigation("Horse");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Domain.Models.Users.PlayerTrophy", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany("PlayerTrophies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Breed", b =>
                {
                    b.Navigation("BreedCrossGroups");

                    b.Navigation("FoundationPairParentBreedDams");

                    b.Navigation("FoundationPairParentBreedSires");

                    b.Navigation("FoundationPairResultBreeds");

                    b.Navigation("HorseTypeSubmissions");

                    b.Navigation("HorseTypes");
                });

            modelBuilder.Entity("Domain.Models.BreedGroup", b =>
                {
                    b.Navigation("Breeds");

                    b.Navigation("CrossGroups");
                });

            modelBuilder.Entity("Domain.Models.Competition", b =>
                {
                    b.Navigation("CompetitionEntries");

                    b.Navigation("CompetitionResults");
                });

            modelBuilder.Entity("Domain.Models.CompetitionLevel", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Domain.Models.CompetitionType", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Domain.Models.CrossGroup", b =>
                {
                    b.Navigation("BreedCrossGroups");
                });

            modelBuilder.Entity("Domain.Models.DisciplineGroup", b =>
                {
                    b.Navigation("AllowedDisciplines");

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Domain.Models.EquineEstate", b =>
                {
                    b.Navigation("EquineEstatesOwners");

                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("Domain.Models.Horse", b =>
                {
                    b.Navigation("BreedQualityScore");

                    b.Navigation("CompetitionProgressions");

                    b.Navigation("CompetitionResults");

                    b.Navigation("ConfPerfTempAttributes");

                    b.Navigation("Foaling");

                    b.Navigation("FoalingDams");

                    b.Navigation("FoalingSires");

                    b.Navigation("HorseBoardings");

                    b.Navigation("HorseOwnerList");

                    b.Navigation("PerformanceQualityScore");

                    b.Navigation("ScorePotential");

                    b.Navigation("TrophyBases");
                });

            modelBuilder.Entity("Domain.Models.HorseType", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Horses");
                });

            modelBuilder.Entity("Domain.Models.HorseTypeSubmission", b =>
                {
                    b.Navigation("HorseTypeSubmissionArtists");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.SaleEventType", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("Domain.Models.Season", b =>
                {
                    b.Navigation("AllowedWeathers");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("PlayerTrophies");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.Venue", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Domain.Models.Sales.AuctionSale", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
